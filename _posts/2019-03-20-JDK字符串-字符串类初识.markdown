---
layout: post
title: JDK字符串-字符串类初识
categories: [java编程]
description: JDK字符串-字符串类初识
keywords: java编程
---
<style id="wiz_custom_css">html, .wiz-editor-body {font-size: 12pt;}.wiz-editor-body {font-family: Helvetica, 'Hiragino Sans GB', '寰蒋闆呴粦', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.7;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}.wiz-editor-body h1,.wiz-editor-body h2,.wiz-editor-body h3,.wiz-editor-body h4,.wiz-editor-body h5,.wiz-editor-body h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}.wiz-editor-body h1 {font-size:20pt;font-size:1.67rem;}.wiz-editor-body h2 {font-size:18pt;font-size:1.5rem;}.wiz-editor-body h3 {font-size:15pt;font-size:1.25rem;}.wiz-editor-body h4 {font-size:14pt;font-size:1.17rem;}.wiz-editor-body h5 {font-size:12pt;font-size:1rem;}.wiz-editor-body h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}.wiz-editor-body div,.wiz-editor-body p,.wiz-editor-body ul,.wiz-editor-body ol,.wiz-editor-body dl,.wiz-editor-body li {margin:8px 0;}.wiz-editor-body blockquote,.wiz-editor-body table,.wiz-editor-body pre,.wiz-editor-body code {margin:8px 0;}.wiz-editor-body .CodeMirror pre {margin:0;}.wiz-editor-body ul,.wiz-editor-body ol {padding-left:32px;padding-left:2rem;}.wiz-editor-body ol.wiz-list-level1 > li {list-style-type:decimal;}.wiz-editor-body ol.wiz-list-level2 > li {list-style-type:lower-latin;}.wiz-editor-body ol.wiz-list-level3 > li {list-style-type:lower-roman;}.wiz-editor-body blockquote {padding: 0 12px;}.wiz-editor-body blockquote > :first-child {margin-top:0;}.wiz-editor-body blockquote > :last-child {margin-bottom:0;}.wiz-editor-body img {border:0;max-width:100%;height:auto !important;margin:2px 0;}.wiz-editor-body table {border-collapse:collapse;border:1px solid #bbbbbb;}.wiz-editor-body td,.wiz-editor-body th {padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28px;word-break:break-word;box-sizing: border-box;}.wiz-hide {display:none !important;}</style></head>

<body class="wiz-editor-body" spellcheck="false" style="opacity: 1;" ><div>对于字符串的相关处理操作是应用程序最常见、最常用的场景了，对于java语言来讲，语言没有提供内置的字符串类型，而是通过<span>boolean、byte、short、char、int、long、float、double</span><span><span>八种基础类型中的char字符一系列定义操作来抽象字符串的一系列的定义和操作处理。</span></span></div><div>所以字符串的类类型实现都是基于char类型的存储结构，基本上都是采用char[]字符数组作为字符串的存储结构。那么对于字符串的定义和处理，一种是可以采用语言内置的char类型来自定义封装字符串类及操作实现，另一种是JDK作为java的标准类库提供了统一的字符串类类型，可以直接使用。</div><div>JDK中对字符串类型的定义和相关处理能力主要有String、StringBuffer、Stringbuilder三个主要的类，位于JDK的lang包中。这三个实现类总结可以归类为两类（这一点区分后面会通过字符串上一个append操作的剖析来看两类类的具体思路差异）：</div><div><ul><li><span>一类是不可变字符串类类型，标准String字符串类就是这一类的，因其中存储具体字符串数据结构的char[]字符数组是final不可修改类型的，任何对赋值之后的字符串修改都无法在原先的字符数组中完成变更；</span><br></li><li><span>一类是可变字符串类类型，</span><span><span>StringBuffer、Stringbuilder字符串类就是这一类，因其中存储的字符串数据结构的char[]字符数组是可被修改类型的，任何对赋值之后的字符串修改都可以反映在该字符数组的变更操作上；</span></span></li></ul></div><div>这三个相关类的基本关系如下，JDK为了统一接口和实现可扩展，为这三个实现类定义统一的接口和抽象类层次结构：</div><div style="text-align: center;"><img src="index_files/3-1.png" class="" style="vertical-align: bottom; max-width: 100%;" width="536" height="982"></div><div><b>1.统一的字符序列接口类CharSequence</b></div><div>所有字符串基本组成单位都是char字符，Char<span>Sequence</span>该类是一个<b>字符序列</b>接口类，该接口类定义基于字符序列串的一系列接口标准。接口类中没有具体的数据结构定义，一般在实现的具体字符串相关类中基于字符串结构定义实现相关<span>Char</span><span>Sequence接口。</span><br></div><div><span>标准接口定义如下：</span></div><div class="wiz-table-container" style="position: relative; padding: 0px;"><div class="wiz-table-body"><table style="width: 773px;"><tbody><tr><td align="left" valign="middle" style="width: 118px;" class=""><span>访问权限</span><br></td><td align="left" valign="middle" style="width: 359px;" class=""><span>方法名</span><br></td><td align="left" valign="middle" style="width: 295px;" class="">说明</td></tr><tr><td style="width: 118px;" class="">Friendly<br></td><td style="width: 359px;" class="">int length();</td><td style="width: 295px;" class="">获取字符序列长度，长度受限int类型大小</td></tr><tr><td align="left" valign="middle" style="width: 118px;" class="">Friendly<br></td><td align="left" valign="middle" style="width: 359px;" class="">char charAt(int index);</td><td align="left" valign="middle" style="width: 295px;" class="">获取指定索引index处字符</td></tr><tr><td style="width: 118px;" class="">Friendly<br></td><td style="width: 359px;" class=""><span>CharSequence subSequence(int start, int end);</span><br></td><td style="width: 295px;" class="">获取指定起止位置之间的子字符序列的字符序列类对象</td></tr><tr><td style="width: 118px;" class=""><span>public<span class="Apple-converted-space">&nbsp;</span></span><br></td><td style="width: 359px;" class="">String toString();</td><td style="width: 295px;" class="">继承Object超类的转换为字符串操作</td></tr></tbody></table></div></div><div><span style="line-height: 1.7;">CharSequence接口类规约了字符序列基本的接口，后续的具体基于字符序列的字符串实现类大多在此基础上实现接口或者扩充它们的功能。</span><br></div><div><b>2.非可变标准字符串类String</b></div><div>JDK为字符串的操作处理定义了专门的字符串类类型，该类主要实现了字符序列的接口类<span>CharSequence，同时定义了字符串处理的基本结构，另外扩充了字符串上的更丰富的操作方法。</span></div><div>String字符串类是个非常庞大的<span data-wiz-span="data-wiz-span">字符</span><span data-wiz-span="data-wiz-span" style="background-color: rgb(255, 170, 255);">串实现类，该类基本构</span><span data-wiz-span="data-wiz-span">成如下：</span></div><div>1）类的声明定义</div><div>标准字符串类String实现三个接口类</div><div><ul><li>String类定义为final类型，禁止被继承</li><li>实现了java.io.Serializable序列化的接口类，标识可以被序列化</li><li>实现了Comparable&lt;String&gt;对象比较接口类，支持字符串对象的compareTo(T o)比较功能</li><li>实现了统一的字符可读序列接口类，支持字符一系列操作功能定义</li></ul></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">public final class </span>String<br>    <span style="color:#cc7832;">implements </span>java.io.Serializable<span style="color:#cc7832;">, </span>Comparable&lt;String&gt;<span style="color:#cc7832;">, </span>CharSequence</pre></div><div>2）数据结构的定义</div><div><ul><li>字符串存储的主体，字符数组。<span>字符串是一连续的字符类型数据组成的，该字符串数据结构在String类中由一个字符数组组成，定义结构如下：</span></li></ul></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">private final char </span>value[]<span style="color:#cc7832;">;</span></pre>String类中基本上所有字符串的创建、操作方法都是围绕该value字符数组展开的，由于该字符串实现类的方法众多，这里就不一一展开说明。</div><div><ul><li>可序列化字段数组，该结构主要用于存放字符串对象中可序列化的部分。</li></ul></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">private static final </span>ObjectStreamField[] serialPersistentFields =<br>        <span style="color:#cc7832;">new </span>ObjectStreamField[<span style="color:#6897bb;">0</span>]<span style="color:#cc7832;">;</span></pre>3）字符串相关操作</div><div>字符串处理的操作方法众多，是个比较庞大的类。该类的方法简单归类后如下：</div><div><ul><li>字符串对象构造方法，主要用于构建标准字符串操作的对象。</li><li>字符串处理操作方法，具体比较多后续会归类列举，看看关键方法源码实现思路。</li></ul></div><div><b>3.统一抽象可变字符串类<span>AbstractStringBuilder</span></b></div><div>与标准字符串String不同的是<span>AbstractStringBuilder</span><span>是一个可被修改的字符串类型的抽象类定义，该抽象类使用可被修改的字符数组结构表示字符串的存储结构。同时该类派生了两个具体的可变字符串操作类</span><span><span>StringBuilder和</span></span><span><span><span>StringBuffer。</span></span></span></div><div><span><span><span><span>1）类的声明定义</span><br></span></span></span></div><div><span>抽象可变字符串处理类</span><span><span>AbstractStringBuilder</span></span><span>实现两个接口类</span><br></div><div><span><ul><li><span><span>AbstractStringBuilder</span></span><span>类型为abstract抽象类；</span><br></li><li><span>实现了Appendable接口类，支持实现该接口的字符串操作类能够被append追加char序列跟值；</span></li><li><span>实现了CharSequence</span><span><span>字符可读序列接口类，支持字符一系列操作功能定义</span></span></li></ul></span></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">abstract class </span>AbstractStringBuilder <span style="color:#cc7832;">implements </span>Appendable<span style="color:#cc7832;">, </span>CharSequence</pre></div><div><span><span>2）数据结构的定义</span></span><span><br></span></div><div><ul><li>抽象的可变字符串<span>AbstractStringBuilder类定义了可变字符串数据结构，该结构跟之前标准String字符串类不同的是字符数组value是可变的，另外还定义了count变量用于计数数组中已经被使用的字符个数，该结构定义如下：</span></li></ul></div><div><span><span><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">char</span>[] value<span style="color:#cc7832;">;</span><span style="color:#629755;font-style:italic;"><br></span><span style="color:#cc7832;">int </span>count<span style="color:#cc7832;">;</span></pre>3）抽象字符串处理类</span></span><span><span><span>AbstractStringBuilder方法定义</span></span></span></div><div><span><span><span>该类方法也比较多，基本上都是常规的可变字符串操作方法，主要包括如下几类：</span></span></span></div><div><ul><li>可变字符串操作类构造方法，主要构造可变字符串操作类对象，这里因为是抽象类，因此不允许被实例化；</li><li><span>字符串处理操作方法，具体都是基于char [] value字符串数组的操作；</span></li></ul></div><div><b>4.可变字符串操作类StringBuilder（线程非安全）</b></div><div>&nbsp; &nbsp; StringBuilder实现类继承至统一的抽象类<span>AbstractStringBuilder，作为可变字符串操作具体实现类，该类是线程非安全的，即该类不考虑字符串并发操作下的控制，性能会好一些，绝大部分情况下字符串的操作基本上都是线程非安全的。</span><br></div><div><span>1）类的声明定义</span></div><div>&nbsp; &nbsp;&nbsp;<span>可变字符串操作实现类</span><span><span>StringBuilder关系如下。</span></span><br></div><div><ul><li>继承至统一<span data-wiz-span="data-wiz-span">的统一抽象可变字符串类AbstractStringBuilder，继承了该抽象类的相关操作方法和数据结构定义；</span></li><li><span data-wiz-span="data-wiz-span">实现了序列化接口和字符序列接口类CharSequence。</span></li></ul></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:0.942rem;"><span style="color:#cc7832;">public final class </span>StringBuilder<br>    <span style="color:#cc7832;">extends </span>AbstractStringBuilder<br>    <span style="color:#cc7832;">implements </span>java.io.Serializable<span style="color:#cc7832;">, </span>CharSequence</pre>2）数据结构定义</div><div>&nbsp; &nbsp; 该类的数据结构继承至<span>统一抽象可变字符串类</span><span>AbstractStringBuilder，该</span><span><span>可变字符串操作实现类都基于同一的字符数组数据结构作为字符串存储主体。</span></span><br></div><div><span><span><pre style="color: rgb(169, 183, 198); font-size: 0.942rem; background-color: rgb(43, 43, 43);"><span style="color:rgb(204, 120, 50);">char</span>[] value<span style="color:rgb(204, 120, 50);">;</span></pre>3）操作方法定义</span></span></div><div><span><span><span>该类方法也比较多，基本上都是实现统一抽象类中可变字符串操作方法，主要包括如下几类：</span></span></span></div><div><ul><li>可变字符串操作实现类构造方法，主要构造可变字符串操作类对象，这里<span>StringBuilder是实现类，所以可以被实例化对象</span>；</li><li><span>字符串处理具体实现操作方法，都是基于char [] value字符串数组的操作；</span></li></ul></div><div><br></div><div><b>5.<b>可变字符串操作类</b>StringBuffer（线程安全）</b></div><div><span style="line-height: 1.7;">&nbsp; &nbsp;&nbsp;</span><span>StringBuffer实现类继承至统一的抽象类</span><span>AbstractStringBuilder，作为可变字符串操作具体实现类，该类是线程安全的，即该类考虑字符串并发操作下的控制，因为涉及并发控制性能略为差些，大多在有并发控制场景使用，确保操作字符串修改是安全的。</span><br></div><div><span>1）类的声明定义</span></div><div>&nbsp; &nbsp;&nbsp;<span>可变字符串操作实现类</span><span><span>StringBuffer</span></span><span><span>关系如下。</span></span><br></div><div><ul><li>继承至统一<span data-wiz-span="data-wiz-span">的统一抽象可变字符串类AbstractStringBuilder，继承了该抽象类的相关操作方法和数据结构定义；</span></li><li><span data-wiz-span="data-wiz-span">实现了序列化接口和字符序列接口类CharSequence。</span></li></ul></div><div><pre style="color: rgb(169, 183, 198); font-size: 0.942rem; background-color: rgb(43, 43, 43);"><pre style="font-family: 宋体;"><span style="color:#cc7832;">public final class </span>StringBuffer<br>   <span style="color:#cc7832;">extends </span>AbstractStringBuilder<br>   <span style="color:#cc7832;">implements </span>java.io.Serializable<span style="color:#cc7832;">, </span>CharSequence</pre></pre>2）数据结构定义</div><div>&nbsp; &nbsp; 该类的数据结构继承至<span>统一抽象可变字符串类</span><span>AbstractStringBuilder，该</span><span><span>可变字符串操作实现类都基于同一的字符数组数据结构作为字符串存储主体。</span></span><br></div><div><span><span><pre style="color:rgb(169, 183, 198);font-size:0.942rem;background-color:rgb(43, 43, 43);"><span style="color:rgb(204, 120, 50);">char</span>[] value<span style="color:rgb(204, 120, 50);">;</span></pre>3）操作方法定义</span></span></div><div><span><span><span>该类方法也比较多，基本上都是实现统一抽象类中可变字符串操作方法，主要包括如下几类：</span></span></span></div><div><ul><li>可变字符串操作实现类构造方法，主要构造可变字符串操作类对象，这里<span>StringBuffer</span><span>是实现类，所以可以被实例化对象</span>；</li><li><span>字符串处理具体实现操作方法，都是基于char [] value字符串数组的操作；</span></li></ul></div><div><span><br></span></div><div><br></div><div><span><span><span><br></span></span></span></div><div><span style="line-height: 1.7;"><span><br></span></span></div></body>
