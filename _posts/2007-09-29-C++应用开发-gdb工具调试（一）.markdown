---
layout: post
title: C++应用开发-gdb工具调试（一）
categories: [c++编程]
description: C++应用开发-gdb工具调试（一）
keywords: C++编程
---
<div id='preview-contents' class='note-content'>



<p><strong>1.准备调试实例</strong></p>

<p>实例保存在chapter0301.cpp文件中，基础代码如下：</p>

<pre class="prettyprint hljs-dark"><code class="hljs cpp"><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
</div><div class="hljs-line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">date_string</span><span class="hljs-params">()</span></span>;
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">date_string</span><span class="hljs-params">()</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-keyword">time_t</span> clock = time(<span class="hljs-literal">NULL</span>);
</div><div class="hljs-line">    <span class="hljs-keyword">struct</span> tm* stm = localtime(&amp;clock);
</div><div class="hljs-line">    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">15</span>];
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line">    <span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">"%4d%02d%02d%02d%02d%02d%"</span>,
</div><div class="hljs-line">                    stm-&gt;tm_year + <span class="hljs-number">1900</span>,
</div><div class="hljs-line">                    stm-&gt;tm_mon + <span class="hljs-number">1</span>,
</div><div class="hljs-line">                    stm-&gt;tm_mday,
</div><div class="hljs-line">                    stm-&gt;tm_hour,
</div><div class="hljs-line">                    stm-&gt;tm_min,
</div><div class="hljs-line">                    stm-&gt;tm_sec);
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> buffer;
</div><div class="hljs-line">}
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-built_in">string</span> date;
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Get current time:"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
</div><div class="hljs-line">    date = date_string();
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;date&lt;&lt;<span class="hljs-built_in">endl</span>;
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
</div><div class="hljs-line">}
</div></code></pre>

<p>编译运行：</p>

<pre class="prettyprint hljs-dark"><code class="hljs llvm"><div class="hljs-line">[root<span class="hljs-title">@iZrj9hx8v6lza94hv1w4zgZ</span> <span class="hljs-keyword">c</span>-<span class="hljs-keyword">c</span>++]# rm -rf chapter<span class="hljs-number">0301</span>.cpp
</div><div class="hljs-line">[root<span class="hljs-title">@iZrj9hx8v6lza94hv1w4zgZ</span> <span class="hljs-keyword">c</span>-<span class="hljs-keyword">c</span>++]# g++ -g chapter<span class="hljs-number">0301</span>.cpp -o chapter<span class="hljs-number">0301</span>
</div><div class="hljs-line">[root<span class="hljs-title">@iZrj9hx8v6lza94hv1w4zgZ</span> <span class="hljs-keyword">c</span>-<span class="hljs-keyword">c</span>++]# ll -ls chapter<span class="hljs-number">0301</span>
</div><div class="hljs-line"><span class="hljs-number">40</span> -rwxr-xr-<span class="hljs-keyword">x</span> <span class="hljs-number">1</span> root root <span class="hljs-number">38136</span> <span class="hljs-number">12</span>月 <span class="hljs-number">26</span> <span class="hljs-number">21</span>:<span class="hljs-number">08</span> chapter<span class="hljs-number">0301</span>
</div></code></pre>

<p>记住要让gdb能够调试运行的程序，需要在编译中添加选项-g，增加调试信息。</p>

<p><strong>2.gdb装载调试程序</strong> <br>
前面一篇，已经简单介绍在gdb工具中如何加载需要调试的可执行应用程序，从而来实现相应的调试应用。</p>

<p>根据前面介绍的gdb启动程序的方法，可以在当前程序目录直接执行gdb程序，启动信息如下。</p>

<pre class="prettyprint hljs-dark"><code class="hljs sql"><div class="hljs-line">[developer@localhost developer]$ gdb  //在shell下执行gdb启动程序命令
</div><div class="hljs-line">GNU gdb Red Hat Linux (5.3post-0.20021129.18rh)
</div><div class="hljs-line">Copyright 2003 Free Software Foundation, Inc.
</div><div class="hljs-line">GDB is free software, covered by the GNU General Public License, and you are
</div><div class="hljs-line">welcome to <span class="hljs-keyword">change</span> it <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-keyword">distribute</span> copies <span class="hljs-keyword">of</span> it <span class="hljs-keyword">under</span> certain conditions.
</div><div class="hljs-line"><span class="hljs-keyword">Type</span> <span class="hljs-string">"show copying"</span> <span class="hljs-keyword">to</span> see the conditions.
</div><div class="hljs-line">There <span class="hljs-keyword">is</span> absolutely <span class="hljs-keyword">no</span> warranty <span class="hljs-keyword">for</span> GDB.  <span class="hljs-keyword">Type</span> <span class="hljs-string">"show warranty"</span> <span class="hljs-keyword">for</span> details.
</div><div class="hljs-line">This GDB was configured <span class="hljs-keyword">as</span> <span class="hljs-string">"i386-redhat-linux-gnu"</span>.
</div><div class="hljs-line">(gdb)                                                                        //gdb会话位置，供调试者执行命令
</div></code></pre>

<p>当开发者在当前shell下直接执行gdb命令来启动该工具后，想要再装载需要调试的可执行程序，此时就需要该工具提供的file命令来指定目标可执行程序进行加载。</p>



<pre class="prettyprint hljs-dark"><code class="hljs gams"><div class="hljs-line">(gdb) <span class="hljs-keyword">file</span> chapter0301  <span class="hljs-comment">//装载调试程序</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-title">Reading</span></span> symbols from chapter0301...done.
</div></code></pre>

<p>当前gdb启动的情况下，单独使用file命令其实就类似于图形界面中提供的打开文件的功能。上述简单的file应用命令操作，将可执行程序chapter0301加载至gdb调试工具中，此命令使用与gdb chapter0301功能相同，随后可以在该会话中使用其它命令实现调试功能。该调试工具加载可执行程序chapter0301之后，当前调试会话中调试该程序，如果需要当前目录中调试其它可执行程序，可以通过file命令直接在该会话中重新加载需要调试的程序名，会切换至新的调试会话中，之前的调试会话被覆盖。</p>

<p><strong>3.gdb运行调试程序</strong> <br>
当装载进入可执行程序之后，需要在该调试工具中运行该程序，查看程序运行的情况。通常需要使用gdb调试工具来调试的程序往往都存在一定的隐性处理错误，所谓的隐性错误是指隐藏在程序逻辑内部，在程序编译过程中编译器无法找出的错误，正常情况下应用程序产生的大部分语法错误应该在程序编译过程中通过查错提示能够得到解决。</p>

<p>1.使用run加载程序</p>

<p>在当前的gdb调试工具中可以使用run命令或者简写r命令，执行加载需要调试的可执行程序，从而查看程序运行是否达到所期望的结果。一旦程序中设置断点，那么执行该命令运行程序会在第一个断点处停住，便于开发者进行下一步的操作。下面依然可以通过直接执行chapter0301程序实例来了解该命令的运作情况。</p>

<pre class="prettyprint hljs-dark"><code class="hljs stylus"><div class="hljs-line">(gdb) run
</div><div class="hljs-line">Starting program: /root/c-c++/chapter0301
</div><div class="hljs-line">Get current <span class="hljs-selector-tag">time</span>:
</div><div class="hljs-line"><span class="hljs-number">20181226210950</span>
</div><div class="hljs-line">[Inferior <span class="hljs-number">1</span> (process <span class="hljs-number">5394</span>) exited normally]
</div><div class="hljs-line">Missing separate debuginfos, use: debuginfo-install glibc-<span class="hljs-number">2.17</span>-<span class="hljs-number">196</span><span class="hljs-selector-class">.el7_4</span>.<span class="hljs-number">2</span><span class="hljs-selector-class">.x86_64</span> libgcc-<span class="hljs-number">4.8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">36</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span> libstdc++-<span class="hljs-number">4.8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">36</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span>
</div></code></pre>

<p>从上述演示过程可见，当当前调试工具中针对该程序没有设置任何的断点时，执行run命令会直接运行得出最终程序处理的结果。此处需要注意的是，该命令的执行只会看到打印输出部分的结果，至于中间运行的过程，则需要使用到单步调试来实现。</p>

<p>2.使用进程号加载 <br>
对于gdb调试工具，在当前会话中依然可以使用run命令直接加调试程序的进程号，在程序运行的情况下进行程序多进程调试。通常在Linux平台的shell下执行两个同一可执行程序会为其分配不同进程号，在gdb工具下可以根据查找到当前可执行程序运行状态下的进程号，在当前会话中执行调试程序。此处依然采用chapter0301的实例程序来作演示，该程序作出修改如下。</p>

<pre class="prettyprint hljs-dark"><code class="hljs abnf"><div class="hljs-line">//main函数最后添加语句
</div><div class="hljs-line">for(<span class="hljs-comment">;;)</span>
</div><div class="hljs-line">  <span class="hljs-comment">;</span>
</div></code></pre>

<p>增加上述空循环的目的是为了在当前循环执行进程期间，根据系统分配的进程号来调试该程序。上述程序编译执行之后，可以通过当前shell下执行ps命令来获取其进程号，该命令执行结果如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs vim"><div class="hljs-line">[developer@localhost]$ <span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> chapter0301  //<span class="hljs-keyword">ps</span>命令查看进程信息
</div><div class="hljs-line"><span class="hljs-number">500</span>       <span class="hljs-number">2279</span>  <span class="hljs-number">2223</span> <span class="hljs-number">94</span> <span class="hljs-number">08</span>:<span class="hljs-number">42</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">0</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">16</span> ./chapter0301
</div><div class="hljs-line"><span class="hljs-number">500</span>       <span class="hljs-number">2313</span>  <span class="hljs-number">2280</span>  <span class="hljs-number">0</span> <span class="hljs-number">08</span>:<span class="hljs-number">42</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">1</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-keyword">grep</span> chapter0301
</div></code></pre>

<p>对于Linux下shell提供的ps命令，初学者此时只需要了解其基本的查看进程状态的功能即可。上述ps命令首先使用了-e与-f选项结合功能，ps命令的-e表示显示系统所有正在运行的进程信息，-f则表示以长列表的形式显示每个进程的信息。</p>

<p>组合之后的ps功能即显示系统中所有正在运行的进程信息，以长列表形式在屏幕输出，另外配合grep查找命令，查找所有进程中为chapter0301的进程信息。所以最终打印输出的仅仅为指定进程名的对应信息。从上述演示结果看来，chapter0301进程号为2223，因此在当前的gdb调试工具中操作如下。</p>



<pre class="prettyprint hljs-dark"><code class="hljs groovy"><div class="hljs-line">(gdb) file chapter0301
</div><div class="hljs-line">Reading symbols from chapter0301...done.
</div><div class="hljs-line">(gdb) run <span class="hljs-number">2223</span>
</div><div class="hljs-line">Starting <span class="hljs-string">program:</span> <span class="hljs-regexp">/mnt/</span>hgfs<span class="hljs-regexp">/share/</span>worktest<span class="hljs-regexp">/linux_c++/</span>gdb/chapter0301 <span class="hljs-number">2223</span>
</div><div class="hljs-line">Get current <span class="hljs-string">time:</span>
</div><div class="hljs-line"><span class="hljs-number">20081221123517</span>
</div></code></pre>

<p>由于大部分生产型的系统都是一天24小时不间断运行，因此可以通过gdb工具中直接运行相应的进程号就可以实现不影响现有应用程序下的调试工作。上述实例首先在gdb工具下通过file命令加载可执行程序，随后根据查找获取的在线应用进程号，在该工具下通过run等命令来执行调试功能。</p>

<p><strong>4.gdb设置断点</strong> <br>
gdb工具加载可执行程序文件之后，通过上小节介绍的run命令可以执行该程序，直到出错处或者程序运行的结果处。该命令执行过程会走完整个可执行程序处理流程，当开发者通过初步考虑程序出错信息断定出错的位置时，可以使用gdb工具提供的break命令来设置相应的断点。</p>

<p>对于计算机应用程序来讲，断点即为程序被中断的地方。具体理解为程序在执行规定处理流程中被打断暂停当前任务从而转向去执行新的任务的过程。随后当新任务执行完成之后可以回到当前断点处继续处理完程序指定的任务。</p>

<p>总之通过在程序中设定相应的断点，可以保证在当前调试工具中执行该程序后到指定位置停止，供开发者查阅此时程序执行的相关情况，来达到排查可能发生的错误。gdb调试工具中提供了break命令在应用程序中设置断点，该命令也可以简写为b。</p>

<p>1.break基本使用方法 <br>
调试工具break命令使用的具有几种不同的操作格式，shell下该命令使用的基本语法规则如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs markdown"><div class="hljs-line">(gdb)break [<span class="hljs-string">function</span>][<span class="hljs-symbol">row number</span>]
</div></code></pre>

<p>当需要调试的可执行程序在gdb中已经加载之后，设置程序断点可以直接采用break命令后加相应的函数名称，或者代码的行数。设定好断点之后，通常gdb工具会打印相关断点设置的基本信息。实例chapter0301考虑到程序执行的主要流程，在主函数以及获取当前时间方法处设置断点如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs vim"><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> main
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0</span>x80489f5: <span class="hljs-keyword">file</span> chapter0301.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">23</span>.
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> <span class="hljs-number">25</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">2</span> at <span class="hljs-number">0</span>x8048a2<span class="hljs-variable">a:</span> <span class="hljs-keyword">file</span> chapter0301.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">25</span>.
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> date_string
</div><div class="hljs-line">Breakpoint <span class="hljs-number">3</span> at <span class="hljs-number">0</span>x8048923: <span class="hljs-keyword">file</span> chapter0301.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">7</span>.
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> <span class="hljs-number">11</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">4</span> at <span class="hljs-number">0</span>x8048945: <span class="hljs-keyword">file</span> chapter0301.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">11</span>.
</div></code></pre>

<p>上述演示表明，在当前调试的应用文件中根据需要设置4个断点位置。断点break命令后直接加函数名设置了main、date_string函数处断点，根据需要指定了程序文件中代码位置处行号来设定另外两个断点位置。断点设置随后会打印输出该断点的相关基本信息，断点的序列号、断点的地址以及断点在代码文件中的行号位置等。</p>

<p>开发者可以根据设置的断点，在当前调试会话中执行run命令，程序运行后会在其第一个断点位置处中断，供调试者查看相关变量、单步调试等操作来诊断程序。</p>

<p>2.多文件断点设置 <br>
另外对于更高的调试需求，gdb也提供了更多断点设置的功能。比如在多文件的可执行程序中，可以通过指定文件相关的断点编号或者方法名等来设置跨文件断点。也提供了程序调试中在特定条件许可情况下触发断点执行的功能。该类断点特殊应用方式调试实例如下所示。 <br>
//实例chapter0302</p>

<pre class="prettyprint hljs-dark"><code class="hljs cpp"><div class="hljs-line"><span class="hljs-comment">//chapter0302_01.h</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>     CHAPTER0302_01_H</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>    CHAPTER0302_01_H</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
</div><div class="hljs-line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*获取当前时间方法声明*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">date_string</span><span class="hljs-params">()</span></span>;
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">//chapter0302_01.cpp</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"chapter0302_01.h"</span></span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*获取当前时间方法定义*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">date_string</span><span class="hljs-params">()</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-comment">//求取当前日历时间</span>
</div><div class="hljs-line">    <span class="hljs-keyword">time_t</span> clock = time(<span class="hljs-literal">NULL</span>);                                                      
</div><div class="hljs-line">    <span class="hljs-comment">//根据当前日历时间求取相应本地时间</span>
</div><div class="hljs-line">    <span class="hljs-keyword">struct</span> tm* stm = localtime(&amp;clock);                                         
</div><div class="hljs-line">    <span class="hljs-comment">//定义字符数组存放时间字符串的变量</span>
</div><div class="hljs-line">    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">15</span>];                                                                                    
</div><div class="hljs-line">    <span class="hljs-comment">//通过sprintf方法格式化时间字符串</span>
</div><div class="hljs-line">    <span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">"%4d%02d%02d%02d%02d%02d"</span>,
</div><div class="hljs-line">        stm-&gt;tm_year + <span class="hljs-number">1900</span>,
</div><div class="hljs-line">        stm-&gt;tm_mon + <span class="hljs-number">1</span>,
</div><div class="hljs-line">        stm-&gt;tm_mday,
</div><div class="hljs-line">        stm-&gt;tm_hour,
</div><div class="hljs-line">        stm-&gt;tm_min,
</div><div class="hljs-line">        stm-&gt;tm_sec);
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> buffer; <span class="hljs-comment">//返回时间字符串求取的结果                                                                              </span>
</div><div class="hljs-line">}
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">//chapter0302_02.cpp</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"chapter0302_01.h"</span></span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*主函数入口*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-built_in">string</span> date ;<span class="hljs-comment">//定义时间字符串变量                                                                                  </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Get current time:"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//打印输出时间提示信息                                            </span>
</div><div class="hljs-line">    date = date_string();<span class="hljs-comment">//调用时间获取方法求取当前时间                                                                  </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;date&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//打印获取的当前时间字符串结果</span>
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
</div><div class="hljs-line">}                                                  
</div></code></pre>

<p>为了演示多文件断点设置功能，实例3-1代码被修改为多文件方式实现同样的功能。程序同样采用加-g参数，多文件C++程序编译命令编辑如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><div class="hljs-line">g++ -g chapter0302_01<span class="hljs-selector-class">.cpp</span> chapter0302_02<span class="hljs-selector-class">.cpp</span> –o chapter0302_02
</div></code></pre>

<p>当前shell下执行该编译命令后，生成相应可执行程序。该程序实现的功能与chapter0301实例相同，可执行程序生成之后，通过gdb命令加载该程序。在当前调试会话中，想要在不同的文件中设置断点，以及在特定条件下执行生效的断点演示如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs groovy"><div class="hljs-line"><span class="hljs-comment">//通过break命令在当前指定的cpp文件设置断点</span>
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> chapter0302_01.<span class="hljs-string">cpp:</span>date_string                               
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x80488eb</span>: file chapter0302_01.cpp, line <span class="hljs-number">5.</span>
</div><div class="hljs-line"><span class="hljs-comment">//通过info查看当前调试程序所有断点信息</span>
</div><div class="hljs-line">(gdb) info <span class="hljs-keyword">break</span>                                                                                   
</div><div class="hljs-line">Num Type           Disp Enb Address    What
</div><div class="hljs-line"><span class="hljs-number">1</span>   breakpoint     keep y   <span class="hljs-number">0x080488eb</span> <span class="hljs-keyword">in</span> date_string() at chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">5</span>
</div><div class="hljs-line"><span class="hljs-comment">//通过break命令根据程序判断条件设定断点</span>
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">16</span> <span class="hljs-keyword">if</span> buffer != <span class="hljs-number">0</span>                        
</div><div class="hljs-line">Breakpoint <span class="hljs-number">2</span> at <span class="hljs-number">0x8048949</span>: file chapter0302_01.cpp, line <span class="hljs-number">16.</span>
</div><div class="hljs-line"><span class="hljs-comment">//查看当前调试程序断点信息</span>
</div><div class="hljs-line">(gdb) info <span class="hljs-keyword">break</span>                                                                                   
</div><div class="hljs-line">Num Type           Disp Enb Address    What
</div><div class="hljs-line"><span class="hljs-number">1</span>   breakpoint     keep y   <span class="hljs-number">0x080488eb</span> <span class="hljs-keyword">in</span> date_string() at chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">5</span>
</div><div class="hljs-line"><span class="hljs-number">2</span>   breakpoint     keep y   <span class="hljs-number">0x08048949</span> <span class="hljs-keyword">in</span> date_string() at chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">16</span>
</div><div class="hljs-line">        stop only <span class="hljs-keyword">if</span> buffer != <span class="hljs-number">0</span>
</div><div class="hljs-line"><span class="hljs-comment">//当前调试会话中执行该调试程序</span>
</div><div class="hljs-line">(gdb) r                                                                                                    
</div><div class="hljs-line">Starting <span class="hljs-string">program:</span> <span class="hljs-regexp">/mnt/</span>hgfs<span class="hljs-regexp">/share/</span>worktest<span class="hljs-regexp">/linux_c++/</span>gdb/chapter0302_02
</div><div class="hljs-line">Get current <span class="hljs-string">time:</span>                                                                                  <span class="hljs-comment">//运行至第一个断点设置处，程序停下</span>
</div><div class="hljs-line"><span class="hljs-comment">//打印当前程序运行的代码行位置信息</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span>, date_string() () at chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">5</span>
</div><div class="hljs-line"><span class="hljs-number">5</span>                 time_t clock = time(NULL);
</div><div class="hljs-line"><span class="hljs-comment">//通过continue命令使得程序从断点处继续执行</span>
</div><div class="hljs-line"><span class="hljs-comment">//程序运行至下一个断点位置停下                                    </span>
</div><div class="hljs-line">(gdb) c                                                                                                   
</div><div class="hljs-line">Continuing.
</div><div class="hljs-line">Breakpoint <span class="hljs-number">2</span>, date_string() () at chapter0302_01.<span class="hljs-string">cpp:</span><span class="hljs-number">16</span>            
</div><div class="hljs-line"><span class="hljs-number">16</span>          <span class="hljs-keyword">return</span> buffer;
</div></code></pre>

<p>上述过程主要演示了多文件中跨文件断点设置与特定情况下断点生效功能，为了提供更多的调试功能，gdb工具允许在设置断点时指定该程序相关的代码文件对应的行或者方法名，同时也允许调试者在假设的情况设置断点。</p>

<p>实例中加载调试程序后，通过break命令后加指定文件名，冒号之后为指定断点的位置或者名称。当创建跨文件断点之后，通过info命令查看创建断点的情况。另外一种是指定断点位置后，通过增加判断条件buffer是不是为空来指定断点在什么样的情况下生效。</p>

<p>随后通过run命令来验证，在当前会话中断点运行情况。由于程序运行到指定函数断点处停止，因此输出该断点运行处第一行代码信息，通过continue（简写c）命令来继续执行下一个断点，上述结果表明符合断点判断信息，因此会在断点位置中断程序运行。</p>

<p><strong>5.gdb断点管理</strong> <br>
当开发者在调试应用程序中设置断点之后，gdb工具提供了一系列的简单命令用于管理这些断点。通过这些基本的断点管理命令，用户可以实现当前会话中的程序断点基本管理。首先，gdb中断点设置完毕之后可以通过提供的info命令显示当前调试会话中所有断点基本信息。</p>



<pre class="prettyprint hljs-dark"><code class="hljs armasm"><div class="hljs-line">(gdb) <span class="hljs-meta">info</span> <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span><span class="hljs-symbol">No</span> <span class="hljs-keyword">breakpoints </span>or watchpoints.
</div><div class="hljs-line">(gdb) <span class="hljs-meta">info</span> <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span><span class="hljs-symbol">Num</span> Type           Disp Enb <span class="hljs-keyword">Address </span>   What
</div><div class="hljs-line"><span class="hljs-number">1</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> y   <span class="hljs-number">0x080489bd</span> in main at chapter0301.cpp:<span class="hljs-number">23</span>
</div><div class="hljs-line"><span class="hljs-number">2</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> y   <span class="hljs-number">0x080488eb</span> in date_string() at chapter0301.cpp:<span class="hljs-number">7</span>
</div><div class="hljs-line"><span class="hljs-number">3</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> y   <span class="hljs-number">0x08048a92</span> in main at chapter0301.cpp:<span class="hljs-number">27</span>
</div><div class="hljs-line"><span class="hljs-number">4</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> y   <span class="hljs-number">0x080489ac</span> in main at chapter0301.cpp:<span class="hljs-number">22</span>
</div></code></pre>

<p>进入调试会话后，断点设置在每次调试结束就会自动清除，此时使用该命令查看应用程序调试断点没有任何信息。用户设置完断点之后，可以通过该命令查看所设置的断点基本信息，由断点编号、断点类型、地址以及断点内容组成。</p>

<p>需要清除某个断点时，可以使用相应的delete命令实现指定断点的删除，如删除main断点如下。</p>



<pre class="prettyprint hljs-dark"><code class="hljs mipsasm"><div class="hljs-line">(gdb) <span class="hljs-keyword">break </span>main
</div><div class="hljs-line"><span class="hljs-keyword">Breakpoint </span><span class="hljs-number">1</span> <span class="hljs-built_in">at</span> <span class="hljs-number">0x80489bd</span>: file chapter0301.cpp, line <span class="hljs-number">23</span>.
</div><div class="hljs-line">(gdb) delete <span class="hljs-number">1</span>
</div><div class="hljs-line">(gdb) info <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span>No <span class="hljs-keyword">breakpoints </span><span class="hljs-keyword">or </span>watchpoints.
</div></code></pre>

<p>上述过程演示了删除调试会话中不需要的断点信息过程，直接使用gdb提供的delete命令指定需要删除的断点编号即可清除指定的断点，随后可以通过info命令直接查看当前会话中所有的断点信息。</p>

<p>对于当前应用程序调试过程中，开发者如果暂时想去掉某个断点不参与当前会话调试，可以使用gdb提供的disable命令来暂时实现断点禁用。基于上述过程，暂时需要禁用main函数处的断点操作如下。</p>



<pre class="prettyprint hljs-dark"><code class="hljs mipsasm"><div class="hljs-line">(gdb) <span class="hljs-keyword">break </span>main
</div><div class="hljs-line"><span class="hljs-keyword">Breakpoint </span><span class="hljs-number">1</span> <span class="hljs-built_in">at</span> <span class="hljs-number">0x80489bd</span>: file chapter0301.cpp, line <span class="hljs-number">23</span>.
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">disable </span><span class="hljs-number">1</span>
</div><div class="hljs-line">(gdb) info <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span>Num Type           <span class="hljs-keyword">Disp </span>Enb <span class="hljs-keyword">Address </span>   What
</div><div class="hljs-line"><span class="hljs-number">1</span>   <span class="hljs-keyword">breakpoint </span>    keep n   <span class="hljs-number">0x080489bd</span> in main <span class="hljs-built_in">at</span> chapter0301.cpp:<span class="hljs-number">23</span>
</div></code></pre>

<p>调试会话中，首先设置main函数断点信息，当整个调试会话中暂时不需要改断点参与调试时，可以使用gdb禁用断点功能。禁止断点命令为disable，后面依然指定为断点信息的编号，随后通过info命令查看当前断点信息可知，一旦禁用断点后断点信息相应的Enb会变为n。</p>

<p>相反，当用户在调试过程中又需要使用暂时被禁用的断点时，gdb提供enable命令来唤醒被禁用的断点，继续使其参与调试过程。上述被禁用的断点信息唤醒操作可以如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs armasm"><div class="hljs-line">(gdb) <span class="hljs-meta">info</span> <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span><span class="hljs-symbol">Num</span> Type           Disp Enb <span class="hljs-keyword">Address </span>   What
</div><div class="hljs-line"><span class="hljs-number">1</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> n   <span class="hljs-number">0x080489bd</span> in main at chapter0301.cpp:<span class="hljs-number">23</span>
</div><div class="hljs-line">(gdb) enable <span class="hljs-number">1</span>
</div><div class="hljs-line">(gdb) <span class="hljs-meta">info</span> <span class="hljs-keyword">break</span>
</div><div class="hljs-line"><span class="hljs-keyword"></span><span class="hljs-symbol">Num</span> Type           Disp Enb <span class="hljs-keyword">Address </span>   What
</div><div class="hljs-line"><span class="hljs-number">1</span>   <span class="hljs-keyword">breakpoint </span>    <span class="hljs-meta">keep</span> y   <span class="hljs-number">0x080489bd</span> in main at chapter0301.cpp:<span class="hljs-number">23</span>
</div></code></pre>

<p>gdb工具中disable与enable命令功能相对，基本使用方法也相同，都是命令后跟相应的断点编号，即可实现相应的禁用以及唤醒断点的功能。上述演示过程首先通过info命令查看当前调试会话断点相关信息，随后根据其断点编号使用enable命令唤醒该断点，此时查看会看到断点信息Enb变化为y，表示断点当前有效。</p>

<p><strong>6.gdb查看相关信息</strong> <br>
当程序调试中运行到指定断点之后，调试者通常需要查询程序中相关变量等基本信息，以此来验证程序在运行过程中是否按照预先设计的思路在处理。gdb工具中提供了一系列的命令功能来完成调试会话过程中，查看应用程序内部处理变量等信息。</p>

<p>1.查看信息命令info</p>

<p>首先介绍第一个gdb查看信息命令info，类似Linux系统本身shell提供的info命令功能。gdb调试工具同样可以使用该命令实现查看相关调试会话中的基本信息。如上小节介绍断点设置时，为查看当前会话中断点的基本信息而使用该命令。info命令在gdb调试会话中可以通过帮助信息来了解其使用方式以及在调试会话中具备查看哪些信息的功能。</p>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info args                – 查看程序中函数参数信息
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info breakpoints     – 查看当前调试会话中断点信息
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info catch              – 查看当前调试程序中生效的异常句柄
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info files                – 显示调试文件的信息
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info functions         – 显示所有方法名信息
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info macro             – 显示宏定义信息
</div><div class="hljs-line"><span class="hljs-selector-tag">q</span>  info sharedlibrary   – 查看当前程序加载的共享库的信息
</div></code></pre>

<p>上述主要列出日常调试应用程序过程中info命令常用组合。不同的组合使用表示查看内容的不同。初学者可以通过调试简单的应用实例开始，逐个的通过实践相应的命令组合来加深调试程序中各个命令使用的印象。</p>

<p>2.查看程序信息print</p>

<p>另一个gdb调试提供的查询命令为print，该命令具备很强的查看程序信息功能。使用该命令调试者可以查看程序运行时任何有效的表达式情况。其中，有效表达式包含基本变量、数组、函数调用以及比较复杂的对象内容的查看。另外gdb还提供了查询相关变量的类型命令whatis，用于配合print命令查看相应变量具体信息，两个查看信息命令使用格式都为查看命令加查询对象表达式组合使用。</p>

<p>应用程序调试中最常见的print命令使用情形要数在程序处理中查阅各个变量的值，以便了解程序处理是否按照设想的处理思路在执行。本小节也主要介绍print命令查看程序中变量值的使用过程，该命令的其余功能可以根据初学者要求自行查阅帮助文档练习。</p>

<p>3.使用示例</p>

<p>上述info、print与whatis命令的使用信息可以通过gdb环境下的help命令查询获取。下面将会通过一个简单完整实例来演示info、print以及whatis命令在调试过程中的使用情况。该实例主要实现几种简单的类型数值计算功能，实例代码编辑如下所示。 <br>
//实例chapter0303</p>



<pre class="prettyprint hljs-dark"><code class="hljs cpp"><div class="hljs-line"><span class="hljs-comment">//chapter0303.h</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span>     CHAPTER0303_01_H</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>    CHAPTER0303_01_H</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
</div><div class="hljs-line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*整型加法运算声明*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>;
</div><div class="hljs-line"><span class="hljs-comment">/*整型减法运算*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>;
</div><div class="hljs-line"><span class="hljs-comment">/*整型乘法运算*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">multi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>;
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">//chapter0303.cpp</span>
</div><div class="hljs-line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"chapter0303.h"</span></span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*整型加法运算定义*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-keyword">int</span> reslut = <span class="hljs-number">0</span>;
</div><div class="hljs-line">    result  =  (value1 + value2);
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> result ;<span class="hljs-comment">//返回传入参数加法结果                                                                      </span>
</div><div class="hljs-line">}
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*整型减法运算定义*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-keyword">int</span> reslut = <span class="hljs-number">0</span>;
</div><div class="hljs-line">    result  =  (value1 - value2);
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> result ; <span class="hljs-comment">//返回传入参数减法结果                                                                     </span>
</div><div class="hljs-line">}
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*整型乘法运算定义*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">multi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value1, <span class="hljs-keyword">int</span> value2)</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;
</div><div class="hljs-line">    result = (value1 * value2)
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//返回传入参数乘法结果                                                                      </span>
</div><div class="hljs-line">}
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line"><span class="hljs-comment">/*主函数入口*/</span>
</div><div class="hljs-line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
</div><div class="hljs-line"><span class="hljs-function"></span>{
</div><div class="hljs-line">    <span class="hljs-keyword">int</span> a,b,result;        <span class="hljs-comment">//定义三个整型变量，分别表示运算数以及计算结果                                                              </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Please input two values:"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//提示输入计算数据</span>
</div><div class="hljs-line">    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;             <span class="hljs-comment">//从键盘输入数据                                                            </span>
</div><div class="hljs-line">    result = sum(a,b);     <span class="hljs-comment">//调用加法运算方法，将计算结果放入结果变量                                                         </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"a and b sums:"</span>&lt;&lt;result&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//打印输出加法计算结果</span>
</div><div class="hljs-line">    result = sub(a,b);     <span class="hljs-comment">//调用减法运算方法，将计算结果放入结果变量                                                         </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"a and b subs:"</span>&lt;&lt;result&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//打印输出减法计算结果</span>
</div><div class="hljs-line">    result = multi(a,b);   <span class="hljs-comment">//调用乘法运算方法，将计算结果放入结果变量                                                    </span>
</div><div class="hljs-line">    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"a and b multis:"</span>&lt;&lt;result&lt;&lt;<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//打印输出乘法计算结果</span>
</div><div class="hljs-line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
</div><div class="hljs-line">}
</div></code></pre>

<p>Linux系统下需要编译源文件为chapter0303.cpp，为了添加gdb调试信息，因此编译时需要加上-g调试命令，该程序文件编译命令编辑如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><div class="hljs-line">g++ -g chapter0303<span class="hljs-selector-class">.cpp</span> –o chapter0303
</div></code></pre>

<p>当前shell下执行上述编译命令，生成可执行程序文件，执行该程序文件运行结果如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs stylus"><div class="hljs-line">[developer @localhost src]<span class="hljs-variable">$g</span>++ -g chapter0303<span class="hljs-selector-class">.cpp</span> -o chapter0303
</div><div class="hljs-line">[developer @localhost src]cp chapter0303 ../bin
</div><div class="hljs-line">[developer @localhost src]<span class="hljs-variable">$cd</span> ../bin
</div><div class="hljs-line">[developer @localhost src]$./chapter0303
</div><div class="hljs-line">Please <span class="hljs-selector-tag">input</span> two values:
</div><div class="hljs-line"><span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">11</span>
</div><div class="hljs-line"><span class="hljs-selector-tag">a</span> and <span class="hljs-selector-tag">b</span> sums:<span class="hljs-number">23</span>
</div><div class="hljs-line"><span class="hljs-selector-tag">a</span> and <span class="hljs-selector-tag">b</span> subs:<span class="hljs-number">1</span>
</div><div class="hljs-line"><span class="hljs-selector-tag">a</span> and <span class="hljs-selector-tag">b</span> multis:<span class="hljs-number">132</span>
</div></code></pre>

<p>实例chapter0303主要实现简单的整型变量计算功能，此处为了配合应用gdb调试命令info、print查看计算过程信息，因此简单的实现了整型变量的几种计算功能。从工程实现意义角度讲，此类运算应该考虑到计算类型的可变性，即可以同时支持不同类型的变量数据计算，后面讲述到C++模板应用时可以给出更具体的实现方式。</p>

<p>该实例实现细节非常的简单，主要由三个基本功能函数组成，函数接口的参数分别都是两个整型数，返回值也定义为整型。计算功能函数内部实现非常简单，仅仅通过return语句直接返回两数计算结果。主程序中定义三个整型变量分别表示参与计算的变量a与b，以及表示计算结果的变量result。随后分别调用计算功能函数，传入输入的整型变量并将计算结果放入结果变量中，最后打印输出查看计算结果。</p>

<p>实例程序在编译时已经添加-g调试信息命令，下面启动gdb调试工具，在调试该实例中演示info、print与whatis命令在实际应用中的情况，实例演示结果如下所示。</p>

<p>本调试实例根据上述程序编译生成的可执行程序，首先在当前Shell中运行gdb程序，启动信息如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs livescript"><div class="hljs-line">[developer@localhost developer]$ gdb                                                   <span class="hljs-regexp">//在shell下执行gdb启动程序命令</span>
</div><div class="hljs-line"><span class="hljs-regexp">GNU gdb Red Hat Linux (5.3post-0.20021129.18rh)                                     //</span>以下为gdb工具启动信息
</div><div class="hljs-line">Copyright <span class="hljs-number">2003</span> Free Software Foundation, Inc.
</div><div class="hljs-line">GDB <span class="hljs-keyword">is</span> free software, covered <span class="hljs-keyword">by</span> the GNU General Public License, <span class="hljs-keyword">and</span> you are
</div><div class="hljs-line">welcome <span class="hljs-keyword">to</span> change <span class="hljs-literal">it</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> distribute copies <span class="hljs-keyword">of</span> <span class="hljs-literal">it</span> under certain conditions.
</div><div class="hljs-line">Type <span class="hljs-string">"show copying"</span> <span class="hljs-keyword">to</span> see the conditions.
</div><div class="hljs-line">There <span class="hljs-keyword">is</span> absolutely <span class="hljs-literal">no</span> warranty <span class="hljs-keyword">for</span> GDB.  Type <span class="hljs-string">"show warranty"</span> <span class="hljs-keyword">for</span> details.
</div><div class="hljs-line">This GDB was configured as <span class="hljs-string">"i386-redhat-linux-gnu"</span>.
</div><div class="hljs-line">(gdb)      <span class="hljs-regexp">//gdb会话位置，供调试者执行命令</span>
</div></code></pre>

<p>接着需要通过gdb程序提供的break命令操作设置程序中的断点信息，具体操作如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs livecodeserver"><div class="hljs-line">(gdb) break main                                                   <span class="hljs-comment"> //通过break命令设置主程序入口断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x8048706</span>: <span class="hljs-built_in">file</span> chapter0303.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">27.</span>
</div><div class="hljs-line">(gdb) break <span class="hljs-built_in">sum</span>                                                     <span class="hljs-comment"> //通过break命令设置加法操作函数处断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">2</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x80486a6</span>: <span class="hljs-built_in">file</span> chapter0303.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">5.</span>
</div><div class="hljs-line">(gdb) break sub                                                      <span class="hljs-comment"> //通过break命令设置减法操作函数处断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">3</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x80486c2</span>: <span class="hljs-built_in">file</span> chapter0303.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">12.</span>
</div><div class="hljs-line">(gdb) break multi                                                    <span class="hljs-comment"> //通过break命令设置乘法操作函数处断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">4</span> <span class="hljs-keyword">at</span> <span class="hljs-number">0x80486e0</span>: <span class="hljs-built_in">file</span> chapter0303.cpp, <span class="hljs-built_in">line</span> <span class="hljs-number">19.</span>
</div></code></pre>

<p>开发者通过分析程序，选出程序中需要设置断点的位置，通过上述break命令设置完断点信息，下面将会通过info命令来查询断点信息设置是否成功，具体操作如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs x86asm"><div class="hljs-line">(gdb) info breakpoints //通过info命令查看当前调试会话所有断点信息
</div><div class="hljs-line">Num Type           Disp Enb Address    What
</div><div class="hljs-line"><span class="hljs-number">1</span>   breakpoint     keep y   <span class="hljs-number">0x08048706</span> <span class="hljs-keyword">in</span> main <span class="hljs-meta">at</span> chapter0303.cpp:<span class="hljs-number">27</span>
</div><div class="hljs-line"><span class="hljs-number">2</span>   breakpoint     keep y   <span class="hljs-number">0x080486a6</span> <span class="hljs-keyword">in</span> sum(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) <span class="hljs-meta">at</span> chapter0303.cpp:<span class="hljs-number">5</span>
</div><div class="hljs-line"><span class="hljs-number">3</span>   breakpoint     keep y   <span class="hljs-number">0x080486c2</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">sub</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) <span class="hljs-meta">at</span> chapter0303.cpp:<span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">4</span>   breakpoint     keep y   <span class="hljs-number">0x080486e0</span> <span class="hljs-keyword">in</span> multi(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) <span class="hljs-meta">at</span> chapter0303.cpp:<span class="hljs-number">19</span>
</div></code></pre>

<p>当前调试会话中使用info命令，设置查看的信息breakpoints表明是断点信息查看，断点设置信息都无误之后，在当前调试会话中将会通过run命令在当前调试会话中运行可执行程序，随后将会在第一个断点出运行停止，具体操作如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs groovy"><div class="hljs-line">(gdb) run <span class="hljs-comment">//通过run命令执行当前调试会下的可执行程序                                                                                  </span>
</div><div class="hljs-line">Starting <span class="hljs-string">program:</span> <span class="hljs-regexp">/home/</span>ocs<span class="hljs-regexp">/users/</span>wangfeng<span class="hljs-regexp">/Linux_c++/</span>chapter03<span class="hljs-regexp">/chapter0303/</span>bin/chapter0303
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span>, main () at chapter0303.<span class="hljs-string">cpp:</span><span class="hljs-number">27</span> <span class="hljs-comment">//程序运行至第一个断点处停下</span>
</div><div class="hljs-line"><span class="hljs-number">27</span>   cout&lt;&lt;<span class="hljs-string">"Please input two values:"</span>&lt;&lt;endl;<span class="hljs-comment">//打印下一行即将执行的代码</span>
</div></code></pre>

<p>以上通过run命令在当前调试会话中运行程序，在第一个断点main函数处打印输出提示信息处停止运行。下一步将会通过next命令来实现gdb单步调试。同时配合print打印命令，查看单步调试过程中各个变量的内容。</p>



<pre class="prettyprint hljs-dark"><code class="hljs stata"><div class="hljs-line">(gdb) <span class="hljs-keyword">n</span>  <span class="hljs-comment">//通过next单步调试命令执行下一行代码                                                                     </span>
</div><div class="hljs-line">Please <span class="hljs-keyword">input</span> <span class="hljs-keyword">two</span> values:
</div><div class="hljs-line">28          cin&gt;&gt;a&gt;&gt;b;
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">n</span>  <span class="hljs-comment">//继续执行单步调试                                                                     </span>
</div><div class="hljs-line">12       <span class="hljs-comment">//输出程序计算中间结果                                                                      </span>
</div><div class="hljs-line">12       <span class="hljs-comment">//输出程序计算中间结果                                                                        </span>
</div><div class="hljs-line">29       result = <span class="hljs-built_in">sum</span>(a,b);
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">print</span> result    <span class="hljs-comment">//通过print命令查看中间变量值                                                  </span>
</div><div class="hljs-line"><span class="hljs-variable">$1</span> = 134514862
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">n</span>               <span class="hljs-comment">//单步运行至第二个断点处                                                        </span>
</div><div class="hljs-line">Breakpoint 2, <span class="hljs-built_in">sum</span>(int, int) (value1=12, value2=12) at chapter0303.cpp:5
</div><div class="hljs-line">5     int reslut = 0;
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">n</span>   <span class="hljs-comment">//单步运行至变量相加代码处                                                                    </span>
</div><div class="hljs-line">6     reslut = (value1 + value2);
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">print</span> result    <span class="hljs-comment">//打印结果变量值                                                  </span>
</div><div class="hljs-line"><span class="hljs-variable">$2</span> = 0    <span class="hljs-comment">//此时还未执行上述代码，因此打印处变量默认值0                                                                     </span>
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">print</span> (value1 + value2)  <span class="hljs-comment">//通过print打印表达式计算结果</span>
</div><div class="hljs-line"><span class="hljs-variable">$3</span> = 24
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">n</span>
</div><div class="hljs-line">7     <span class="hljs-keyword">return</span> reslut;
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">print</span> result   <span class="hljs-comment">//当执行完毕上述表达式计算代码后，打印结果变量，输出其值</span>
</div><div class="hljs-line"><span class="hljs-variable">$4</span> = 24
</div></code></pre>

<p>上述过程中通过next命令将程序执行到从键盘输入变量的代码处，继续通过next命令执行程序下一步，输出了输入的两个变量值，同时提示执行至将两个变量实现相加的代码处。随后通过print命令打印result变量的内容值，由于还没正式执行该部分变量相加调用，因此此时的result变量中存放的是一个未知数的值。</p>

<p>再通过next命令执行程序下一步，执行到第二个断点处，调用到sum函数实现a、b两个变量的相加操作，同时显示下一步需要执行的代码，是result变量的定义。继续执行next命令，运行至两个变量实际计算表达式处，此时还未执行正式的计算，因此通过print打印输出的result变量值依然为初始的0值。</p>

<p>随后通过print命令直接打印了表达式中两个变量之和的计算结果，显示结果为24，因为输入的两个计算变量都为12。继续next执行下一步程序，定位至返回计算结果变量result代码处，此时通过print打印输出result变量信息，为两个变量计算的之和。</p>



<pre class="prettyprint hljs-dark"><code class="hljs q"><div class="hljs-line">(gdb) whatis result  <span class="hljs-comment">//通过whatis命令查看当前变量的类型                                                 </span>
</div><div class="hljs-line"><span class="hljs-built_in">type</span> = <span class="hljs-type">int</span>
</div><div class="hljs-line">(gdb) c              <span class="hljs-comment">//通过continue命令继续程序的执行，直到最后输出结果                                                         </span>
</div><div class="hljs-line">Continuing.
</div><div class="hljs-line">a <span class="hljs-built_in">and</span> b <span class="hljs-built_in">sums</span>:<span class="hljs-number">24</span>
</div></code></pre>

<p>最后通过whatis命令查看result变量的类型，直接whatis紧跟着为查询变量名即可。查询结果可知sum函数内部变量result为整型。通过continue命令继续执行程序，加法函数内部根据传入的实参计算完毕后返回，主程序中打印输出结算结果，因此上述调试最后显示a与b相加结果为24。</p>



<pre class="prettyprint hljs-dark"><code class="hljs css"><div class="hljs-line">7<span class="hljs-selector-class">.gdb</span>单步调试
</div></code></pre>

<p>gdb中单步调试程序主要表现在程序运行中需要一步步确认运行过程是否正确的场合下，方便开发者调试程序运行中的一些细节问题。</p>

<p>gdb工具提供单步调试共有两种命令，即step与next，两种命令都可以用于在当前调试会话中单步执行调试程序。两个命令使用的基本语法形式基本相同，大致操作如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs awk"><div class="hljs-line">(gdb) n             <span class="hljs-regexp">//</span><span class="hljs-keyword">next</span>命令简写
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">next</span>          <span class="hljs-regexp">//</span><span class="hljs-keyword">next</span>命令全名称
</div><div class="hljs-line">(gdb) s             <span class="hljs-regexp">//</span>step命令简写
</div><div class="hljs-line">(gdb) step          <span class="hljs-regexp">//</span>step命令全名称
</div></code></pre>

<p>并且两种命令后都可以跟相应的参数，表示执行到当前程序后的几行，不设定任何参数时默认情况表示单行，即命令执行一次程序运行到下一行代码。</p>

<p>两种同样可以实现单步调试功能的命令虽然功能相同，但在执行细节上存在一定的区别。对于单步调试命令step来讲，除了单步执行程序之外，当遇到函数调用时会单步进入该函数内部执行。而不同的是next命令遇到函数调用通常不会进入函数内部执行。</p>

<p>上小节实例chapter0303中，通过next命令可以查看到函数内部的代码执行情况，那是因为之前已经通过设置断点信息，在执行的时候往往都直接定位至断点处的下一行代码。因此通过next命令可以在断点后单步的查看程序执行情况。</p>

<p>为了区分清楚step与next命令之间的差别，依然采用chapter0301的实例，但是在调试前不设置断点，该调试演示如下所示。</p>



<pre class="prettyprint hljs-dark"><code class="hljs groovy"><div class="hljs-line"><span class="hljs-comment">//step命令演示</span>
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> main                <span class="hljs-comment">//设置主程序入口处断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x8048706</span>: file chapter0303.cpp, line <span class="hljs-number">27.</span>
</div><div class="hljs-line">(gdb) r                         <span class="hljs-comment">//当前调试会话中执行程序</span>
</div><div class="hljs-line">Starting <span class="hljs-string">program:</span> <span class="hljs-regexp">/home/</span>ocs<span class="hljs-regexp">/users/</span>wangfeng<span class="hljs-regexp">/Linux_c++/</span>chapter03<span class="hljs-regexp">/chapter0303/</span>bin/chapter0303
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span>, main () at chapter0303.<span class="hljs-string">cpp:</span><span class="hljs-number">27</span> <span class="hljs-comment">//程序运行至主程序入口断点处停下</span>
</div><div class="hljs-line"><span class="hljs-number">27</span>     cout&lt;&lt;<span class="hljs-string">"Please input two values:"</span>&lt;&lt;endl;
</div><div class="hljs-line">(gdb) step                     <span class="hljs-comment">//通过step单步调试程序</span>
</div><div class="hljs-line">Please input two <span class="hljs-string">values:</span>
</div><div class="hljs-line"><span class="hljs-number">28</span>     cin&gt;&gt;a&gt;&gt;b;
</div><div class="hljs-line">(gdb) step                     <span class="hljs-comment">//继续单步执行程序</span>
</div><div class="hljs-line"><span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">29</span>     result = sum(a,b);
</div><div class="hljs-line">(gdb) step                      <span class="hljs-comment">//通过step单步调试命令可进入函数内部跟踪调试</span>
</div><div class="hljs-line">sum(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) (value1=<span class="hljs-number">12</span>, value2=<span class="hljs-number">12</span>) at chapter0303.<span class="hljs-string">cpp:</span><span class="hljs-number">5</span>
</div><div class="hljs-line"><span class="hljs-number">5</span>     <span class="hljs-keyword">int</span> reslut = <span class="hljs-number">0</span>;
</div><div class="hljs-line">(gdb) <span class="hljs-keyword">break</span> main                <span class="hljs-comment">//设置主程序入口处断点</span>
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x8048706</span>: file chapter0303.cpp, line <span class="hljs-number">27.</span>
</div><div class="hljs-line"><wbr>
</div><div class="hljs-line">(gdb) r                         <span class="hljs-comment">//当前调试会话中执行程序</span>
</div><div class="hljs-line">Starting <span class="hljs-string">program:</span> <span class="hljs-regexp">/home/</span>ocs<span class="hljs-regexp">/users/</span>wangfeng<span class="hljs-regexp">/Linux_c++/</span>chapter03<span class="hljs-regexp">/chapter0303/</span>bin/chapter0303
</div><div class="hljs-line">Breakpoint <span class="hljs-number">1</span>, main () at chapter0303.<span class="hljs-string">cpp:</span><span class="hljs-number">27</span> <span class="hljs-comment">//运行至断点处程序停下</span>
</div><div class="hljs-line"><span class="hljs-number">27</span>    cout&lt;&lt;<span class="hljs-string">"Please input two values:"</span>&lt;&lt;endl;
</div><div class="hljs-line">(gdb) n                          <span class="hljs-comment">//通过next单步执行程序</span>
</div><div class="hljs-line">Please input two <span class="hljs-string">values:</span>
</div><div class="hljs-line"><span class="hljs-number">28</span>          cin&gt;&gt;a&gt;&gt;b;
</div><div class="hljs-line">(gdb) n                          <span class="hljs-comment">//继续单步执行程序</span>
</div><div class="hljs-line"><span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">12</span>
</div><div class="hljs-line"><span class="hljs-number">29</span>    result = sum(a,b);
</div><div class="hljs-line">(gdb) n                          <span class="hljs-comment">//next单步调试命令遇到函数调用并不进入其中                                                                  </span>
</div><div class="hljs-line"><span class="hljs-number">30</span> cout&lt;&lt;<span class="hljs-string">"a and b sums:"</span>&lt;&lt;result&lt;&lt;endl; <span class="hljs-comment">//与step单步调试的最大区别</span>
</div><div class="hljs-line">(gdb) n
</div><div class="hljs-line">a and b <span class="hljs-string">sums:</span><span class="hljs-number">24</span>
</div><div class="hljs-line"><span class="hljs-number">31</span>          result = sub(a,b);
</div></code></pre>

<p>上述调试演示可以看出，step命令用于单步需要进入调用函数内部执行的情况，而next命令则可以用于正常情况下的单步调试。初学者可以在该类命令后添加执行调试代码行数，练习该类命令使用情况。</p></div>
