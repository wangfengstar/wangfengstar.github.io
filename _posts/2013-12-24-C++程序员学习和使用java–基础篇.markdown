---
layout: post
title: C++程序员学习和使用java–基础篇
categories: [java编程]
description: C++程序员学习和使用java–基础篇
keywords: java编程
---
<div id='preview-contents' class='note-content'>



<p>大约在14年，因为工作需要我从使用了8年的C++语言开发的领域转向了红红火火的java。从事过多年程序开发的人应该都知道，有一句鼓励技术人员的话，大致上意思是“只要深耕一门编程语言，最终领悟到的编程的思想是相通的，你可以在理解的编程思想的基础上使用不同的语言作为工具”。</p>

<p>的确，我多年的开发经验认同业内这个思路。编程语言作为软件开发者的工具，也有场景擅长领域，C++语言可以开发web类应用，更多的是在偏向计算，相对底层一点。因为C++保留了C语言与操作系统之间API直接对接的能力，可以比较方便的使用Linux/Unix这样的底层API实现网络通信、内存操作等功能。相比java语言，java语言以及围绕java类应用开发形成的体系，更像一个平台。</p>

<p>从C++转向java开发，感受到最大的区别还在于java领域JVM虚拟机独特性、java第三方库、和java各类框架实在是太多了。它会让你开始进入这个领域的时候不知所措，因为你会看到除了JDK本身提供的库的能力以外，借助第三方库的能力，可以提供更多的技术相关的功能。</p>

<p>对于想从事这个领域或者从C++这样语言开发转过来的小伙伴，个人建议一开始不需要被这样的庞大技术体系所困扰，还是要从语言等基础角度来理解，通过不断的实践来加深理解。相信有过两门以及以上的计算机语言开发者，更应该能体会思想相通，融会贯通的含义。</p>

<p>要理解将要转向的语言开发，不妨先从总体上来做个归类。</p>

<p>1.开发工具</p>

<p>1）C++开发：</p>

<p>C++语言不是跨平台的语言，因为底层实现直接与各操作系统遵循的一定标准实现API对接，但是这个标准在各个操作系统上支持或者实现的方式可能是不同，导致了C++语言开发的程序如果你需要支持在多个操作系统上面运行，比如Unix，Linux，Windows。那一开始都需要做好开发的程序上面适配，开发的库API、不同的编译器编译等。</p>

<p>以前笔者是从事Unix/Linux平台下的C++应用系统开发，尤其像商用Unix小型机，基本上都会存在一些不同需要关注的点，这是因为不同厂商比如IBM AIX，HP-UNIX，Sun Solaris他们在支持C++语言的编译器上不同，在一些操作系统层面的比如文件系统管理等可能也会存在不同的实现。当然在Linux上在一些工具的标准尽量实现了统一。</p>

<p>由于习惯所致，我们以前在开发C++应用上主要还是UE这样的文本编辑工具，同时定义一套适合自己应用的Makefile模板，本地写代码，远程Linux主机下make编译，Gdb调试等。当然微软推出的visual studio一直是比较优秀的开发IDE，除了支持windows平台开发以外也可以支持跨平台Linux开发。</p>

<p>2）Java开发：</p>

<p>java语言最大的变化就是支持跨平台，通过底下一层虚拟机规范推出的各类JVM来实现了跨平台的适配。java语言首先编译成字节码，统一运行在java的虚拟机平台上。因此在java语言开发的时候，无需太多关注运行不同的操作系统上的差异。</p>

<p>java的开发IDE工具有很多，比较流行的Eclipse、Intellij IDE，个人比较推荐使用Intellij IDE，从使用操作来看、功能支持上面来看Intellij IDE都感觉顺手很多，当然Eclipse也是很优秀的工具，很多的java开发人员都在使用。</p>

<p>2.开发语言</p>

<p>1）熟悉C++的开发的人员，在学习java语言方面应该会比较的容易上手。同样是面向对象的编程语言，在类设计、对象化编程方面大方面不会有太大的区别。 <br>
2）但是两门语言本身在细节本身还是有些差异的，重点几个点如下：</p>

<p>a. Java语言中在实现多态特性上更推荐使用接口类模式，java把接口模式在语言层面实现了支持，通过关键字interface来实现接口定义，通过implements关键字来实现各类接口类定义。另外在类继承等语言特性上面也有些支持的细微差别，注意在语言学习上关注下这些细节。后面文章会一一记录一些需要关注的点。</p>

<p>b. Java语言的第三方库非常的多，对于转向java的开发者，一开始建议不需要被明目繁多的各类库所困扰，主要集中精力还是在JDK原生提供的API上面，最好在使用的同时能深入JDK源码对这些IO、线程等的API内部实现有所理解，这样更有利于对语言使用的理解，也能再理解为何第三方库会不断的出现，解决一些场景下原生API无法或者性能等问题。</p>

<p>c. Java语言在支持编程开发上跟C++的细节区别还有很多，包括在关键字能力支持上，java的IO模型、内存管理模型、线程模型等后面的文章会记录使用过程中的一些差异点。</p>

<p>3.重点关注JVM</p>

<p>java语言底层运行在JVM上，JVM也决定了java应用相应的性能和稳定性，所以对于C++转过来的程序员，有条件和精力的不妨深入一下JVM了解一下实现的机制，对做好java应用开发还是很有帮助的。</p>

<p>在转变的前期，不妨就先重点熟悉这三个方面，先别陷入java一系列框架中去，否则一开始就会被淹没在这个技术平台中不知所措。</p>

<p>那么，我们先从Java的语言基础开始这场开发之旅吧！</p></div>
